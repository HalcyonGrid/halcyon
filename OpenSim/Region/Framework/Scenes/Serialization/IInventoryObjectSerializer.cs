/*
 * Copyright (c) 2015, InWorldz Halcyon Developers
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 * 
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 * 
 *   * Neither the name of halcyon nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace OpenSim.Region.Framework.Scenes.Serialization
{
    /// <summary>
    /// Serialization interface for inventory objects
    /// </summary>
    public interface IInventoryObjectSerializer
    {
        /// <summary>
        /// Returns whether or not this serializer can deserialize the passed data
        /// </summary>
        /// <param name="bytes">A serialized object stream</param>
        /// <returns></returns>
        bool CanDeserialize(byte[] bytes);

        /// <summary>
        /// Returns whether or not this asset data represents a coalesced object
        /// </summary>
        /// <param name="bytes">A serialized object stream</param>
        /// <returns></returns>
        bool IsValidCoalesced(byte[] bytes);

        /// <summary>
        /// Returns whether or not this asset data represents a single scene object group
        /// </summary>
        /// <param name="bytes">A serialized object stream</param>
        /// <returns></returns>
        bool IsValidGroup(byte[] bytes);

        /// <summary>
        /// Serializes a SOG to bytes that can then be deserialized and restored later
        /// </summary>
        /// <param name="group"></param>
        /// <param name="stopScripts"></param>
        /// <returns></returns>
        byte[] SerializeGroupToInventoryBytes(SceneObjectGroup group, SerializationFlags flags);

        /// <summary>
        /// Deserializes a group from a set of bytes generated by this interface
        /// </summary>
        /// <param name="bytes"></param>
        /// <returns></returns>
        SceneObjectGroup DeserializeGroupFromInventoryBytes(byte[] bytes);

        /// <summary>
        /// Serializes a coalesced object into bytes that can then be deserialized and restored later
        /// </summary>
        /// <param name="csog"></param>
        /// <param name="stopScripts"></param>
        /// <returns></returns>
        byte[] SerializeCoalescedObjToInventoryBytes(OpenSim.Region.Framework.Scenes.CoalescedObject csog, SerializationFlags flags);

        /// <summary>
        /// Deserializes a coalesced object from a set of bytes generated by this interface
        /// </summary>
        /// <param name="csog"></param>
        /// <returns></returns>
        OpenSim.Region.Framework.Scenes.CoalescedObject DeserializeCoalescedObjFromInventoryBytes(byte[] csog);
    }
}
